// Code generated by counterfeiter. DO NOT EDIT.
package vspherefakes

import (
	"net/url"
	"sync"
	"vsphere-cleaner/vsphere"
)

type FakeConfig struct {
	BuildUrlStub        func() *url.URL
	buildUrlMutex       sync.RWMutex
	buildUrlArgsForCall []struct{}
	buildUrlReturns     struct {
		result1 *url.URL
	}
	buildUrlReturnsOnCall map[int]struct {
		result1 *url.URL
	}
	UsedIPsStub        func() ([]string, error)
	usedIPsMutex       sync.RWMutex
	usedIPsArgsForCall []struct{}
	usedIPsReturns     struct {
		result1 []string
		result2 error
	}
	usedIPsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	DirectorIPStub        func() string
	directorIPMutex       sync.RWMutex
	directorIPArgsForCall []struct{}
	directorIPReturns     struct {
		result1 string
	}
	directorIPReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfig) BuildUrl() *url.URL {
	fake.buildUrlMutex.Lock()
	ret, specificReturn := fake.buildUrlReturnsOnCall[len(fake.buildUrlArgsForCall)]
	fake.buildUrlArgsForCall = append(fake.buildUrlArgsForCall, struct{}{})
	fake.recordInvocation("BuildUrl", []interface{}{})
	fake.buildUrlMutex.Unlock()
	if fake.BuildUrlStub != nil {
		return fake.BuildUrlStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildUrlReturns.result1
}

func (fake *FakeConfig) BuildUrlCallCount() int {
	fake.buildUrlMutex.RLock()
	defer fake.buildUrlMutex.RUnlock()
	return len(fake.buildUrlArgsForCall)
}

func (fake *FakeConfig) BuildUrlReturns(result1 *url.URL) {
	fake.BuildUrlStub = nil
	fake.buildUrlReturns = struct {
		result1 *url.URL
	}{result1}
}

func (fake *FakeConfig) BuildUrlReturnsOnCall(i int, result1 *url.URL) {
	fake.BuildUrlStub = nil
	if fake.buildUrlReturnsOnCall == nil {
		fake.buildUrlReturnsOnCall = make(map[int]struct {
			result1 *url.URL
		})
	}
	fake.buildUrlReturnsOnCall[i] = struct {
		result1 *url.URL
	}{result1}
}

func (fake *FakeConfig) UsedIPs() ([]string, error) {
	fake.usedIPsMutex.Lock()
	ret, specificReturn := fake.usedIPsReturnsOnCall[len(fake.usedIPsArgsForCall)]
	fake.usedIPsArgsForCall = append(fake.usedIPsArgsForCall, struct{}{})
	fake.recordInvocation("UsedIPs", []interface{}{})
	fake.usedIPsMutex.Unlock()
	if fake.UsedIPsStub != nil {
		return fake.UsedIPsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.usedIPsReturns.result1, fake.usedIPsReturns.result2
}

func (fake *FakeConfig) UsedIPsCallCount() int {
	fake.usedIPsMutex.RLock()
	defer fake.usedIPsMutex.RUnlock()
	return len(fake.usedIPsArgsForCall)
}

func (fake *FakeConfig) UsedIPsReturns(result1 []string, result2 error) {
	fake.UsedIPsStub = nil
	fake.usedIPsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeConfig) UsedIPsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.UsedIPsStub = nil
	if fake.usedIPsReturnsOnCall == nil {
		fake.usedIPsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.usedIPsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeConfig) DirectorIP() string {
	fake.directorIPMutex.Lock()
	ret, specificReturn := fake.directorIPReturnsOnCall[len(fake.directorIPArgsForCall)]
	fake.directorIPArgsForCall = append(fake.directorIPArgsForCall, struct{}{})
	fake.recordInvocation("DirectorIP", []interface{}{})
	fake.directorIPMutex.Unlock()
	if fake.DirectorIPStub != nil {
		return fake.DirectorIPStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.directorIPReturns.result1
}

func (fake *FakeConfig) DirectorIPCallCount() int {
	fake.directorIPMutex.RLock()
	defer fake.directorIPMutex.RUnlock()
	return len(fake.directorIPArgsForCall)
}

func (fake *FakeConfig) DirectorIPReturns(result1 string) {
	fake.DirectorIPStub = nil
	fake.directorIPReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) DirectorIPReturnsOnCall(i int, result1 string) {
	fake.DirectorIPStub = nil
	if fake.directorIPReturnsOnCall == nil {
		fake.directorIPReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.directorIPReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildUrlMutex.RLock()
	defer fake.buildUrlMutex.RUnlock()
	fake.usedIPsMutex.RLock()
	defer fake.usedIPsMutex.RUnlock()
	fake.directorIPMutex.RLock()
	defer fake.directorIPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vsphere.Config = new(FakeConfig)
