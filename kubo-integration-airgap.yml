---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: kubo-lock
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: {{git-ssh-key}}
    pool: kubo-deployment

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json


# Creds
- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-service-creds
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/ci-service-creds.yml


# Source Artifacts - to be tested
- name: gcs-kubo-release-pre
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-pre
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz


- name: proxy-tf
  type: terraform
  source:
    vars:
      region: us-east1
    storage:
      region_name: eu-west-1
      bucket: kubo-pipeline-store
      bucket_path: terraform/airgap/tinyproxy
      access_key_id: {{aws-access-key-id}}
      secret_access_key: {{aws-secret-access-key}}
    # the '//' indicates a sub-directory in a git repo
    terraform_source: github.com/pivotal-cf-experimental/kubo-ci//terraform

# Target Artifacts - to be uploaded
# - name: gcs-kubo-release-pass-airgap
#   type: gcs
#   source:
#     json_key: {{gcs-json-key}}
#     bucket: kubo-public
#     regexp: kubo-release-(.*).tgz
#
# - name: gcs-kubo-deployment-pass-airgap
#   type: gcs
#   source:
#     json_key: {{gcs-json-key}}
#     bucket: kubo-public
#     regexp: kubo-deployment-(.*).tgz


# - name: slack-alert
#   type: slack-notification
#   source:
#     url: {{slack-url}}


############################################
# Jobs
############################################
jobs:

- name: claim-lock
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-release-pre
      trigger: true
    - get: gcs-kubo-deployment-pre
      trigger: true
  - put: kubo-lock
    params: { acquire: true }

- name: manual-release-lock
  plan:
  - get: kubo-lock
    passed: [claim-lock]
  - put: kubo-lock
    params: { release: kubo-lock }

- name: install-bosh
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'claim-lock' ]
    - get: gcs-kubo-release-pre
      passed: [ 'claim-lock' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'claim-lock' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'claim-lock' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: install
    file: git-kubo-ci/tasks/install-bosh.yml
    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Deploy BOSH failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-proxy
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'claim-lock' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'claim-lock' ]

  - task: generate-proxy-tfvars
    file: git-kubo-ci/tasks/generate-proxy-tfvars.yml

  - put: proxy-tf
    params:
      delete_on_failure: true
      env_name_file: kubo-lock/name
      var_files: [ tfvars_dir/terraform.tfvars ]

- name: manual-bosh-cleanup
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'claim-lock' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'claim-lock' ]
    - get: kubo-lock
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: destroy
    file: git-kubo-ci/tasks/destroy-bosh.yml
  - put: kubo-lock
    params: { release: kubo-lock }


- name: deploy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'install-bosh' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'install-bosh' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'install-bosh' ]
    - get: gcs-kubo-release-pre
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh' ]
    - get: proxy-tf
      passed: [ 'deploy-proxy' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: apply-proxy-to-env
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfkubo/kubo-ci
          tag: stable

      inputs:
      - name: kubo-lock
      - name: git-kubo-ci
      - name: proxy-tf
      outputs:
      - name: kubo-lock-with-proxy
      run:
        path: /bin/bash
        args:
        - -exc
        - |
          cp -r kubo-lock/* kubo-lock-with-proxy/
          proxy_setting=$(cat proxy-tf/metadata | jq -r .proxy_setting)
          echo "http_proxy: $proxy_setting" >> kubo-lock-with-proxy/metadata
          echo "https_proxy: $proxy_setting" >> kubo-lock-with-proxy/metadata
          bosh-cli interpolate kubo-lock-with-proxy/metadata --ops-file=git-kubo-ci/ops-files/internetless.yml > kubo-lock-with-proxy/metadata

  - task: deploy
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-pre
      kubo-lock: kubo-lock-with-proxy
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml

    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Deploy K8s failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: gcs-service-creds
    params:
      file: service-creds/ci-service-creds.yml

- name: deploy-workload
  serial_groups: [airgap]
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'deploy-k8s' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s' ]
    - get: gcs-service-creds
      passed: [ 'deploy-k8s' ]
    - get: gcs-kubo-release-pre
      passed: [ 'deploy-k8s' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'deploy-k8s' ]
    - get: proxy-tf
      passed: [ 'deploy-k8s' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
  - task: workload
    file: git-kubo-ci/tasks/deploy-k8s-workload.yml
    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Deploy K8s Workload failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: pod-to-pod
    file: git-kubo-ci/tasks/pod-to-pod.yml
    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Pod to pod communication failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'deploy-workload' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'deploy-workload' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'deploy-workload' ]
    - get: gcs-kubo-release-pre
      passed: [ 'deploy-workload' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-workload' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-workload' ]
    - get: proxy-tf
      passed: [ 'deploy-workload' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: destroy-k8s
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Destroy K8s failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-proxy
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'deploy-workload' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'deploy-workload' ]
    - get: proxy-tf
      passed: [ 'deploy-workload' ]

  - task: generate-proxy-tfvars
    file: git-kubo-ci/tasks/generate-proxy-tfvars.yml

  - put: proxy-tf
    params:
      env_name_file: kubo-lock/name
      var_files: [ tfvars_dir/terraform.tfvars ]
      action: destroy

- name: destroy-bosh
  plan:
  - aggregate:
    - get: git-kubo-ci
      passed: [ 'destroy-k8s' ]
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'destroy-k8s' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'destroy-k8s' ]
    - get: gcs-kubo-release-pre
      passed: [ 'destroy-k8s' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: destroy
    file: git-kubo-ci/tasks/destroy-bosh.yml
    # on_failure:
    #   put: slack-alert
    #   params:
    #     silent: true
    #     icon_emoji: ":thumbsdown:"
    #     text: |
    #       Destroy BOSH failed:
    #       https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: kubo-lock
    params: { release: kubo-lock }

#
# - name: upload-kubo-deployment
#  serial_groups: [airgap]
#   plan:
#   - aggregate:
#     - get: git-kubo-ci
#     - get: git-kubo-deployment
#       passed: [ destroy-bosh ]
#     - get: kubo-version
#       passed: [ destroy-bosh ]
#       trigger: true
#   - task: create-kubo-deployment-tarball
#     file: git-kubo-ci/tasks/create-kubo-deployment-tarball.yml
#   - aggregate:
#     - put: gcs-kubo-deployment-tarball
#       params:
#         file: tarballs/kubo-deployment-*.tgz
#     - put: gcs-kubo-deployments
#       params:
#         file: tarballs/kubo-deployment-*.tgz
#
#
# - name: upload-kubo-release
#  serial_groups: [airgap]
#   plan:
#   - aggregate:
#     - get: gcs-kubo-release-tarball-untested
#       passed: [ destroy-bosh ]
#     - get: kubo-version
#       passed: [ destroy-bosh ]
#       trigger: true
#   - aggregate:
#     - put: gcs-kubo-release-tarball
#       params:
#         file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz
#     - put: gcs-kubo-releases
#       params:
#         file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz
#
# - name: success-notification
#  serial_groups: [airgap]

#   plan:
#   - aggregate:
#     - get: kubo-version
#       passed: [ upload-kubo-release, upload-kubo-deployment ]
#       trigger: true
#   - put: slack-alert
#     params:
#       silent: true
#       icon_emoji: ":frog:"
#       text: |
#         I am green and it'll do fine, it's beautiful
#         And I think it's what I want to be
