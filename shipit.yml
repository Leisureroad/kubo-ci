<%
  envs = %w(gcp-lb)
  stemcell_types = {
    'gcp' => 'google-kvm',
    'gcp-lb' => 'google-kvm',
    'vsphere' => 'vsphere-esxi',
    'vsphere-lb' => 'vsphere-esxi',
    'vsphere-proxy' => 'vsphere-esxi',
    'aws' => 'aws-xen-hvm',
    'aws-lb' => 'aws-xen-hvm',
    'openstack' => 'openstack-kvm'
  }
  additional_envs = %w()
  env_list = envs + additional_envs
  enable_failure_alert = true

  upgrade_test_envs = %w()
  multi_az_envs = %w(gcp-lb)
  multi_master_upgrade_test_envs = %w(gcp-lb)
  envs_for_new_bosh_stemcell = upgrade_test_envs | multi_master_upgrade_test_envs
  conformance_test_envs = envs
  proxy_envs = %w()
  bbr_test_envs = %w()
  coredns_test_envs = %w()
%>
---
groups:
- name: all
  jobs:
  - run-unit-tests
  - build-kubo-release
  - package-kubo-deployment-tarball
  - upload-kubo-deployment
  - upload-kubo-release
  - success-notification
  - release-version
  - upload-github-releases
  - bump-minor-version
- name: build
  jobs:
  - run-unit-tests
  - build-kubo-release
  - package-kubo-deployment-tarball

resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: pcfkubo/bosh-deployment-resource
    tag: v2.12.1-dev

- name: bosh-errand
  type: docker-image
  source:
    repository: pcfkubo/bosh2-errand-resource
    tag: v0.1.3-dev

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-ci.git
    branch: master
    private_key: ((git-ssh-key.private_key))

- name: git-kubo-deployment
  type: git
  source:
    uri: git@github.com:iainsproat/kubo-deployment.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-release
  type: git
  source:
    uri: git@github.com:iainsproat/kubo-release.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

- name: slackers
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/cfcr-home.git
    private_key: ((git-ssh-key.private_key))
    paths:
    - 'slackers'

- name: slack-alert
  type: slack-notification
  source:
    url: ((build-alert-slack-url))

- name: gcs-kubo-release-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    regexp: dev-builds/kubo-release-(.*).tgz

- name: gcs-kubo-deployment-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    regexp: dev-builds/kubo-deployment-(.*).tgz

- name: gcs-kubo-releases
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployments
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950
    versioned_file: kubo-deployment-latest.tgz

- name: kubo-version
  type: semver
  source:
    driver: gcs
    key: versions/kubo-version
    json_key: ((gcs-json-key))
    bucket: shipit-testing-155998950

- name: gh-release-kubo-release
  type: github-release
  source:
    owner: iainsproat
    repository: kubo-release
    access_token: ((github-token-key))
    drafts: true
    pre_release: true

- name: gh-release-kubo-deployment
  type: github-release
  source:
    owner: iainsproat
    repository: kubo-deployment
    access_token: ((github-token-key))
    drafts: true
    pre_release: true

- name: tracker-finisher
  type: tracker
  source:
    token: ((cfcr-tracker-token))
    project_id: "2093412"
    tracker_url: https://www.pivotaltracker.com

jobs:
- name: run-unit-tests
  plan:
  - get: slackers
  - get: git-kubo-ci
  - get: git-kubo-deployment
    trigger: true
  - get: git-kubo-release
    trigger: true
  - task: run-release-unit-tests
    file: git-kubo-ci/tasks/run-release-unit-tests.yml
    <% if enable_failure_alert %>
    on_failure: &on_failure_alert
      do:
      - task: configure-slack-notification
        file: git-kubo-ci/tasks/configure-slack-notification.yml
      - put: slack-alert
        params:
          attachments_file: slack-notification/attachments
          text: |
            Build Failed. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    <% else %>
    on_failure: &on_failure_alert
    <% end %>
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml
    on_failure: *on_failure_alert

- name: build-kubo-release
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'run-unit-tests' ]
      trigger: true
    - get: kubo-version
      params:
        pre: dev
    - get: git-kubo-release
      passed: [ 'run-unit-tests' ]
      trigger: true
  - task: build-kubo-release
    file: git-kubo-ci/tasks/build-kubo-release.yml
    on_failure: *on_failure_alert
  - put: gcs-kubo-release-tarball-untested
    params:
      file: kubo-release/kubo-release-*.tgz
  - put: kubo-version
    params:
      pre: dev

- name: package-kubo-deployment-tarball
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: kubo-version
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'build-kubo-release' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
  - task: build-kubo-deployment-tarball
    file: git-kubo-ci/tasks/build-kubo-deployment-tarball.yml
    on_failure: *on_failure_alert
  - put: gcs-kubo-deployment-tarball-untested
    params:
      file: kubo-deployment-tarball/kubo-deployment*.tgz

<%
  passed_requirements = ["package-kubo-deployment-tarball"]
%>

- name: upload-kubo-deployment
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= passed_requirements %>
  - aggregate:
    - put: gcs-kubo-deployment-tarball
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz
    - put: gcs-kubo-deployments
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz

- name: upload-kubo-release
  plan:
  - aggregate:
    - get: gcs-kubo-release-tarball-untested
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
  - aggregate:
    - put: gcs-kubo-release-tarball
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz
    - put: gcs-kubo-releases
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz

- name: success-notification
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ upload-kubo-release, upload-kubo-deployment ]
      trigger: true
    - get: git-kubo-release
      passed: <%= passed_requirements %>
    - get: git-kubo-deployment
      passed: [ upload-kubo-deployment ]
      trigger: true
  - put: tracker-finisher
    params:
      repos:
        - git-kubo-release
        - git-kubo-deployment
  - put: slack-alert
    params:
      text: |
        Published new artifacts for kubo-release and kubo-deployment. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: release-version
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
    - get: git-kubo-release
      passed: <%= passed_requirements %>
    - get: git-kubo-deployment
      passed: <%= passed_requirements %>

- name: upload-github-releases
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-version
      params:
        bump: final
    - get: git-kubo-release
      passed: [ 'release-version' ]
    - get: git-kubo-deployment
      passed: [ 'release-version' ]
  - task: upload-releases
    file: git-kubo-ci/tasks/upload-github-releases.yml
    params:
      ACCESS_KEY_ID: ((gcs-access-key-id))
      SECRET_ACCESS_KEY: ((gcs-secret-access-key))
  - aggregate:
    - do:
      - put: git-kubo-release
        params:
          repository: git-kubo-release-output
          merge: true
      - put: gh-release-kubo-release
        params:
          name: kubo-release/name
          tag: kubo-version/version
          tag_prefix: v
          body: kubo-release/body
          globs: ["kubo-release/*.tgz"]
    - do:
      - put: git-kubo-deployment
        params:
          repository: git-kubo-deployment
          tag: kubo-version/version
          tag_prefix: v
          only_tag: true
      - put: gh-release-kubo-deployment
        params:
          name: kubo-deployment/name
          tag: kubo-version/version
          tag_prefix: v
          body: kubo-deployment/body
          globs: ["kubo-deployment/kubo-deployment-*.tgz"]
    - put: git-kubo-ci
      params:
        repository: git-kubo-ci
        only_tag: true
        tag: kubo-version/version
        tag_prefix: v
  - put: kubo-version
    params:
      bump: patch

- name: bump-minor-version
  plan:
  - get: kubo-version
  - put: kubo-version
    params:
      bump: minor
