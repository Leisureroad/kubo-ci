#@IgnoreInspection BashAddShebang
# vim: set ft=sh

export_bosh_environment() {
  export BOSH_ENV=$1
  export BOSH_NAME=$(basename ${BOSH_ENV})
}

restore_debug_output() {
  [[ -z "${DEBUG:-}" ]] || set -x
}

get_bosh_secret() {
  set +x
  get_setting "creds.yml" "/bosh_admin_client_secret"
  restore_debug_output
}

get_setting() {
  local file_name=$1
  local value_path=$2

  bosh int ${BOSH_ENV}/${file_name} --path "${value_path}" | xargs echo -n
}

get_setting_with_default() {
  local default_value=$3
  local value=$(get_setting $1 $2 2>/dev/null)
  if [[ "$value" == "" ]]; then
    echo ${default_value}
  else
    echo ${value}
  fi
}

set_cloud_config() {
  set +x
  local cloud_config=$(generate_cloud_config ${BOSH_ENV})
  echo "$cloud_config" | BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh -n -e "${BOSH_NAME}" update-cloud-config -
  restore_debug_output
}

check_for_existing_deployment() {
  local deployment_name=$1

  if [ -z "$deployment_name" ]; then
    echo "Deployment name is required in $0:check_for_existing_deployment()"
    exit 1
  fi

  set +x
  BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) \
                    bosh deployment -d ${deployment_name} | xargs echo -n
  restore_debug_output
}

deploy_to_bosh() {
  local bosh_manifest=$1
  local deployment_name=$2

  if [ $# -ne 2 ]; then
    echo "Bosh manifest and deployment name are required in $0:deploy_to_bosh()"
    exit 1
  fi

  set +x
  echo "${bosh_manifest}" | BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh -d ${deployment_name} -n deploy -
  restore_debug_output
}

create_and_upload_release() {
  local release_dirname=$1
  local release_name="$(basename ${release_dirname%-release})"

  if [ -d "$release_dirname" ]; then
    pushd "$release_dirname"
      set +x
      BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh create-release --force --name "${release_name}"
      restore_debug_output
      upload_release "--name=${release_name}"
    popd
  else
    echo "${release_dirname} repo not found - unable to create the ${release_name} release"
    exit 1
  fi
}

upload_release() {
  local release_name=$1
  set +x
  BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh upload-release "$release_name"
  restore_debug_output
}

set_ops_file_if_one_path_exists() {
  local variables_file="$1"
  local ops_file_path="$2"

  for variable_yaml_path in "${@:3}"; do
    if bosh int "$variables_file" --path="$variable_yaml_path" &>/dev/null; then
      echo " --ops-file=\"$ops_file_path\""
      return
    fi
  done
}

set_ops_file_if_true() {
  local variables_file="$1"
  local variable_yaml_path="$2"
  local ops_file_path="$3"

  value=$(bosh int "$variables_file" --path="$variable_yaml_path" 2> /dev/null)

  if [[ $value = 'true' ]]; then
    echo " --ops-file=\"$ops_file_path\""
  fi
}

set_ops_file_if_file_exists() {
  local ops_file="$1"

  if [[ -f "$ops_file" ]]; then
    echo " --ops-file=\"$ops_file\""
  fi
}

set_vars_file_if_file_exists() {
  local vars_file="$1"

  if [[ -f "$vars_file" ]]; then
    echo " --vars-file=\"$vars_file\""
  fi

}

set_default_var_if_path_does_not_exist() {
  local variables_file="$1"
  local variable_yaml_path="$2"
  local default_value="$3"

  if [[ -z "$(bosh int "${variables_file}" --path="${variable_yaml_path}" 2>/dev/null)" ]]; then
    echo " --var ${variable_yaml_path#/}=${default_value}"
  fi
}

