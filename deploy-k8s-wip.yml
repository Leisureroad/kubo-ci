resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: cfcommunity/bosh2-errand-resource

resources:
- name: git-kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment.git
    branch: master

- name: git-kubo-release
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-release.git
    branch: master

- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-ci.git
    branch: no_deploy_k8s

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent

- name: cfcr-deployment
  type: bosh-deployment
  source:
    deployment: ci-service

- name: run-apply-addons-errand
  type: bosh-errand
  source:
    deployment: ci-service

- name: run-smoke-tests-errand
  type: bosh-errand
  source:
    deployment: ci-service

<%- env = "gcp-lb" %>
- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml


- name: kubo-lock-<%= env %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= env %>

- name: gcs-source-json
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: source.json

- name: gcs-var-file
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: var.yml

jobs:
- name: claim-lock-<%= env %>
  max_in_flight: 1
  plan:
  - put: kubo-lock-<%= env %>
    params: { acquire: true }


- name: install-bosh-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= env %>' ]
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    params:
      USE_TURBULENCE: 1
      <% if env.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json
  - task: configure-bosh-for-turbulence
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/configure-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
  - task: generate-ops-file
    config:
      inputs:
      - name: git-kubo-ci
      - name: kubo-lock
      - name: gcs-bosh-creds
      outputs:
      - name: var-file
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          kubernetes_master_host="$(bosh int kubo-lock/metadata --path=/kubernetes_master_host)"
          kubernetes_master_port="$(bosh int kubo-lock/metadata --path=/kubernetes_master_port)"
          echo "kubernetes_master_host: ${kubernetes_master_host}" > var-file/vars.yml
          echo "kubernetes_master_port: ${kubernetes_master_port}" >> var-file/vars.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= env %>
  - put: gcs-var-file
    params:
      file: var-file/vars.yml
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= env %>
  - put: gcs-source-json
    params:
      file: source-json/source.json

- name: deploy-cfcr
  serial: true
  serial_groups: [cfcr-pipeline]
  plan:
  - aggregate:
    - get: git-kubo-deployment
    - get: git-kubo-release
    - get: stemcell
    - get: gcs-source-json
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-var-file
      passed: [ 'install-bosh-<%= env %>' ]
  - task: create-release
    config:
      caches:
      - path: git-kubo-release/blobs
      - path: git-kubo-release/dev_releases
      inputs:
      - name: git-kubo-release
      outputs:
      - name: cfcr-release-tarball
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          bosh create-release --dir=git-kubo-release --tarball=cfcr-release-tarball/cfcr-release.tgz --timestamp-version
  - put: cfcr-deployment
    params:
      manifest: git-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      ops_files:
      - git-kubo-deployment/manifests/ops-files/misc/single-master.yml
      - git-kubo-deployment/manifests/ops-files/misc/bootstrap.yml
      - git-kubo-deployment/manifests/ops-files/use-runtime-config-bosh-dns.yml
      vars_files:
      - gcs-var-file/var.yml
      stemcells:
      - stemcell/stemcell.tgz
      releases:
      - cfcr-release-tarball/cfcr-release.tgz
      source_file: gcs-source-json/source.json
      vars:
        deployment_name: ci-service
        worker_count: 1
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: gcs-source-json/source.json
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: gcs-source-json/source.json

- name: delete-cfcr
  serial: true
  serial_groups: [cfcr-pipeline]
  plan:
  - get: gcs-source-json
    passed: [ 'install-bosh-<%= env %>' ]
  - put: cfcr-deployment
    params:
      source_file: gcs-source-json/source.json
      delete:
        enabled: true
