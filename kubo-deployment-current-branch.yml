---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: git-kubo-deployment
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-deployment
    branch: {{branch-name}}

- name: git-kubo-release
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-release
    branch: master

- name: kubo-lock
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: {{git-ssh-key}}
    pool: kubo-deployment

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-service-creds
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/ci-service-creds.yml

- name: gcs-kubo-release-tarball-untested
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-releases
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-releases
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployments
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-releases
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

- name: kubo-version
  type: semver
  source:
    key: kubo-version
    access_key_id: {{gcs-access-key-id}}
    secret_access_key: {{gcs-secret-access-key}}
    bucket: kubo-pipeline-store
    region_name: us-east1
    endpoint: storage.googleapis.com

- name: slack-alert
  type: slack-notification
  source:
    url: {{slack-url}}

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
  - get: git-kubo-release
  - task: run-release-unit-tests
    file: git-kubo-ci/tasks/run-release-unit-tests.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Kubo release unit tests failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Kubo deployment unit tests failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: claim-lock
  max_in_flight: 1
  plan:
  - aggregate:
    - get: git-kubo-release
    - get: git-kubo-deployment
  - put: kubo-lock
    params: { acquire: true }
  - put: kubo-version
    params:
      pre: dev

- name: install-bosh
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
  - get: git-kubo-release
    passed: [ 'claim-lock' ]
  - get: kubo-lock
    version: every
    trigger: true
    passed: [ 'claim-lock' ]
  - get: kubo-version
    passed: [ 'claim-lock' ]
  - task: install
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      GCP_SERVICE_ACCOUNT: {{gcp-service-account}}
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Deploy BOSH on {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: manual-bosh-cleanup
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: kubo-lock
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh' ]
  - task: destroy
    file: git-kubo-ci/tasks/destroy-bosh.yml
    params:
      GCP_SERVICE_ACCOUNT: {{gcp-service-account}}
  - put: kubo-lock
    params: { release: kubo-lock }


- name: build-kubo-release
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'install-bosh' ]
    - get: git-kubo-deployment
      trigger: true
      passed: [ 'install-bosh' ]
    - get: kubo-version
      passed: [ 'install-bosh' ]
    - get: git-kubo-release
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh' ]
  - task: build-kubo-release
    file: git-kubo-ci/tasks/build-kubo-release.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          Kubo release build  on {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: gcs-kubo-release-tarball-untested
    params:
      file: kubo-release/kubo-release-*.tgz

- name: deploy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'build-kubo-release' ]
    - get: git-kubo-deployment
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
    - get: kubo-version
      passed: [ 'build-kubo-release' ]
    - get: gcs-bosh-state
      passed: [ 'build-kubo-release' ]
    - get: gcs-bosh-creds
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'build-kubo-release' ]
  - task: deploy
    input_mapping: {gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested}
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    params:
      ROUTING_CF_CLIENT_SECRET: {{routing_cf_client_secret}}
      ROUTING_CF_NATS_PASSWORD: {{routing_cf_nats_password}}
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Deploy K8s on branch {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: gcs-service-creds
    params:
      file: service-creds/ci-service-creds.yml

- name: deploy-workload
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'deploy-k8s' ]
    - get: git-kubo-deployment
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s' ]
    - get: kubo-version
      passed: [ 'deploy-k8s' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s' ]
    - get: gcs-service-creds
      passed: [ 'deploy-k8s' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s' ]
  - task: workload
    file: git-kubo-ci/tasks/deploy-k8s-workload.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Deploy K8s Workload on branch {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: pod-to-pod
    file: git-kubo-ci/tasks/pod-to-pod.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Pod to pod communication on branch {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'deploy-workload' ]
    - get: kubo-version
      passed: [ 'deploy-workload' ]
    - get: git-kubo-deployment
    - get: gcs-bosh-state
      passed: [ 'deploy-workload' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-workload' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-workload' ]
  - task: destroy-k8s
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Destroy K8s on branch {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME


- name: destroy-bosh
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'destroy-k8s' ]
    - get: kubo-version
      passed: [ 'destroy-k8s' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s' ]
  - task: destroy
    file: git-kubo-ci/tasks/destroy-bosh.yml
    params:
      GCP_SERVICE_ACCOUNT: {{gcp-service-account}}
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":octopus:"
        text: |
          Destroy BOSH on branch {{branch-name}} failed:
          https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: kubo-lock
    params: { release: kubo-lock }

- name: upload-kubo-deployment
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: kubo-version
      passed: [ destroy-bosh ]
      trigger: true
  - task: create-kubo-deployment-tarball
    file: git-kubo-ci/tasks/create-kubo-deployment-tarball.yml
  - aggregate:
    - put: gcs-kubo-deployment-tarball
      params:
        file: tarballs/kubo-deployment-*.tgz
    - put: gcs-kubo-deployments
      params:
        file: tarballs/kubo-deployment-*.tgz


- name: upload-kubo-release
  plan:
  - aggregate:
    - get: gcs-kubo-release-tarball-untested
      passed: [ destroy-bosh ]
    - get: kubo-version
      passed: [ destroy-bosh ]
      trigger: true
  - aggregate:
    - put: gcs-kubo-release-tarball
      params:
        file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz
    - put: gcs-kubo-releases
      params:
        file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz

- name: success-notification
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ upload-kubo-release, upload-kubo-deployment ]
      trigger: true
  - put: slack-alert
    params:
      silent: true
      icon_emoji: ":chameleon:"
      text: |
        kubo-deployment pipeline on branch {{branch-name}} has succeeded
