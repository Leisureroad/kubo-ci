<%
  iaas_list = %w(gcp vsphere gcp-lb aws-lb)
  upgrade_iaas_list = %w(gcp-lb)
  stemcell_types = {
    'gcp-lb' => 'google-kvm'
  }
%>
---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: git-kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment
    branch: master

- name: git-kubo-release
  type: pull-request
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-release
    repo: cloudfoundry-incubator/kubo-release
    base: master
    private_key: ((git-ssh-key.private_key))
    access_token: ((github-token-key))

<% iaas_list.each do |iaas| %>
- name: kubo-lock-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= iaas %>
<% end %>

<% upgrade_iaas_list.each do |iaas| %>
- name: kubo-lock-upgrade-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= iaas %>

- name: new-bosh-stemcell-<%= iaas %>
  type: bosh-io-stemcell
  source:
    name: bosh-<%= stemcell_types[iaas] %>-ubuntu-trusty-go_agent
<% end %>

- name: old-kubo-release-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

- name: old-kubo-deployment-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: k8s/config

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: release-pr/kubo-release.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: release-pr/kubo-deployment.tgz

- name: kubo-version
  type: semver
  source:
    key: versions/kubo-version
    access_key_id: ((gcs-access-key-id))
    secret_access_key: ((gcs-secret-access-key))
    bucket: kubo-pipeline-store
    region_name: us-east1
    endpoint: storage.googleapis.com

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
  - get: git-kubo-release
    version: every
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: run-unit-tests
    file: git-kubo-ci/tasks/run-release-unit-tests.yml
    on_failure: &on_failure
      put: git-kubo-release
      params:
        path: git-kubo-release
        status: failure

- name: build-kubo-release
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      trigger: true
      passed: [ 'run-unit-tests' ]
    - get: kubo-version
    - get: git-kubo-release
      passed: [ 'run-unit-tests' ]
      trigger: true
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: build-kubo-release
    file: git-kubo-ci/tasks/build-kubo-release.yml
    on_failure: *on_failure
  - put: gcs-kubo-release-tarball
    params:
      file: kubo-release/kubo-release-*.tgz

- name: package-kubo-deployment-tarball
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: kubo-version
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'build-kubo-release' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
  - task: build-kubo-deployment-tarball
    file: git-kubo-ci/tasks/build-kubo-deployment-tarball.yml
    input_mapping: {gcs-kubo-release-tarball-untested: gcs-kubo-release-tarball}
  - put: gcs-kubo-deployment-tarball
    params:
      file: kubo-deployment-tarball/kubo-deployment*.tgz

<% upgrade_iaas_list.each do |iaas| %>
- name: claim-lock-upgrade-<%= iaas %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      passed: ["package-kubo-deployment-tarball"]
      trigger: true
    - get: git-kubo-release
      passed: ["package-kubo-deployment-tarball"]
    - get: git-kubo-deployment
    - get: gcs-kubo-release-tarball
      passed: ["package-kubo-deployment-tarball"]
    - get: gcs-kubo-deployment-tarball
  - put: kubo-lock-upgrade-<%= iaas %>
    params: { acquire: true }

- name: install-old-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: old-kubo-deployment-tarball
    - get: kubo-lock-upgrade-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
    input_mapping:
      kubo-lock: kubo-lock-upgrade-<%= iaas %>
      git-kubo-deployment: unpacked_dir

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-old-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-upgrade-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: old-kubo-deployment-tarball
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: old-kubo-release-tarball
      params:
        globs:
        - "kubo-release*"
    - get: gcs-kubo-release-tarball
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-old-bosh-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: old-kubo-release-tarball
      kubo-lock: kubo-lock-upgrade-<%= iaas %>
      git-kubo-deployment: unpacked_dir
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
  - put: gcs-kubeconfig
    params:
      file: gcs-kubeconfig/config

- name: upgrade-bosh-and-kubo-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-upgrade-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: new-bosh-stemcell
      resource: new-bosh-stemcell-<%= iaas %>

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball
    tags: ['<%= iaas %>']

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/run-k8s-upgrade-tests.yml
    input_mapping:
      kubo-lock: kubo-lock-upgrade-<%= iaas %>
      gcs-kubo-release-tarball: gcs-kubo-release-tarball

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: destroy-k8s-upgrade-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-upgrade-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball
    tags: ['<%= iaas %>']

  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping:
      kubo-lock: kubo-lock-upgrade-<%= iaas %>

- name: destroy-bosh-upgrade-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-tarball
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: kubo-lock-upgrade-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball
    tags: ['<%= iaas %>']

  - task: destroy
    tags: [ '<%= iaas %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-upgrade-<%= iaas %>

  - put: kubo-lock-<%= iaas %>
    params:
      release: kubo-lock-upgrade-<%= iaas %>
<% end %>

<% iaas_list.each do |iaas| %>
- name: claim-lock-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-release
      version: every
      trigger: true
      passed: [ 'build-kubo-release' ]
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'build-kubo-release' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }
    on_failure: *on_failure

- name: install-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'claim-lock-<%= iaas %>' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    params:
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
    on_failure: &on_failure_<%= iaas %>
      aggregate:
      - put: git-kubo-release
        params:
          path: git-kubo-release
          status: failure
      - do:
        - task: cleanup-<%= iaas %>
          tags: [<%= iaas %>]
          file: git-kubo-ci/tasks/cleanup-<%= iaas.split('-').first %>-environment.yml
          input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
          params:
            ENV_FILE: kubo-lock/metadata
        - put: kubo-lock-<%= iaas %>
          params: { release: kubo-lock-<%= iaas %> }


  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      trigger: true
      version: every
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
      passed: [ 'install-bosh-<%= iaas %>' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: deploy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: run-k8s-integration-tests-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      trigger: true
      version: every
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= iaas %>' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: integration-tests
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>
    params:
      ENABLE_ADDONS_TESTS: true
      ENABLE_API_EXTENSIONS_TESTS: true
      ENABLE_CERTIFICATE_TESTS: true
      ENABLE_GENERIC_TESTS: true
      ENABLE_OSS_ONLY_TESTS: true
      ENABLE_PERSISTENT_VOLUME_TESTS: true
  - task: pod-to-pod
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/pod-to-pod.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: destroy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      trigger: true
      version: every
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: destroy-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      trigger: true
      version: every
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-<%= iaas %>' ]
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: destroy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

  - put: kubo-lock-<%= iaas %>
    params: { release: kubo-lock-<%= iaas %> }
  <% end %>

<%
  success_conditions = upgrade_iaas_list.map {|iaas| "destroy-bosh-upgrade-#{iaas}"}.compact
  success_conditions += iaas_list.collect { |iaas| "destroy-bosh-#{iaas}" }
%>

- name: success-notification
  plan:
  - get: git-kubo-ci
  - get: git-kubo-release
    passed: <%= success_conditions %>
    trigger: true
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: success
