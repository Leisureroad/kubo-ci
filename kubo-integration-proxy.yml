<%
  iaas_list = %w(gcp vsphere)
%>
---
groups:
- name: all
  jobs:
<% iaas_list.each do |iaas| %>
  - claim-lock-<%= iaas %>
  - install-bosh-<%= iaas %>
  - deploy-proxy-<%= iaas %>
  - apply-runtime-config-<%= iaas %>
  - deploy-k8s-<%= iaas %>
  - deploy-workload-<%= iaas %>
  - destroy-k8s-<%= iaas %>
  - destroy-proxy-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>
<% iaas_list.each do |iaas| %>
- name: <%= iaas %>
  jobs:
  - claim-lock-<%= iaas %>
  - install-bosh-<%= iaas %>
  - deploy-proxy-<%= iaas %>
  - apply-runtime-config-<%= iaas %>
  - deploy-k8s-<%= iaas %>
  - deploy-workload-<%= iaas %>
  - destroy-k8s-<%= iaas %>
  - destroy-proxy-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

<% iaas_list.each do |iaas| %>
- name: kubo-lock-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: {{git-ssh-key}}
    pool: kubo-<%= iaas == "gcp" ? "deployment" : iaas %>
<% end %>

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json


# Creds
- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

# Source Artifacts - to be tested
- name: gcs-kubo-release-pre
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-pre
  type: gcs
  source:
    json_key: {{gcs-json-key}}
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

# Target Artifacts - to be uploaded
# - name: gcs-kubo-release-pass-proxy
#   type: gcs
#   source:
#     json_key: {{gcs-json-key}}
#     bucket: kubo-public
#     regexp: kubo-release-(.*).tgz
#
# - name: gcs-kubo-deployment-pass-proxy
#   type: gcs
#   source:
#     json_key: {{gcs-json-key}}
#     bucket: kubo-public
#     regexp: kubo-deployment-(.*).tgz


- name: slack-alert
  type: slack-notification
  source:
    url: {{slack-url}}


############################################
# Jobs
############################################
jobs:

<% iaas_list.each do |iaas| %>
- name: claim-lock-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-release-pre
      trigger: true
    - get: gcs-kubo-deployment-pre
      trigger: true
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-release-pre
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: install
    file: git-kubo-ci/tasks/install-bosh.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Deploy BOSH failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-proxy-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-pre
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: ['install-bosh-<%= iaas %>']
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: deploy-tinyproxy
    file: git-kubo-ci/tasks/deploy-tinyproxy.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    params:
      IAAS: "<%=iaas%>"

- name: apply-runtime-config-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-proxy-<%= iaas %>' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-kubo-release-pre
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-proxy-<%= iaas %>' ]

  - task: apply-runtime-config
    file: git-kubo-ci/tasks/apply-runtime-config.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

- name: deploy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'apply-runtime-config-<%= iaas %>' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'apply-runtime-config-<%= iaas %>' ]
    - get: gcs-kubo-release-pre
      passed: [ 'apply-runtime-config-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'apply-runtime-config-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'apply-runtime-config-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: apply-proxy-to-env
    file: git-kubo-ci/tasks/apply-proxy-to-env.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-pre
      kubo-lock: kubo-lock-with-proxy
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml

    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Deploy K8s failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: deploy-workload-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-release-pre
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'deploy-k8s-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: workload
    file: git-kubo-ci/tasks/deploy-k8s-workload.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Deploy K8s Workload failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: pod-to-pod
    file: git-kubo-ci/tasks/pod-to-pod.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Pod to pod communication failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-kubo-deployment-pre
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-kubo-release-pre
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-workload-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: destroy-k8s
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    tags: [<%= iaas %>]
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Destroy K8s failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-proxy-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-pre
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-workload-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    tags: [<%= iaas %>]

  - task: destroy-tinyproxy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-tinyproxy.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

- name: destroy-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed:
      - 'destroy-proxy-<%= iaas %>'
      - 'destroy-k8s-<%= iaas %>'
    - get: gcs-kubo-deployment-pre
      passed:
      - 'destroy-proxy-<%= iaas %>'
      - 'destroy-k8s-<%= iaas %>'
    - get: gcs-kubo-release-pre
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed:
      - 'destroy-proxy-<%= iaas %>'
      - 'destroy-k8s-<%= iaas %>'

  - task: unpack-kubo-deployment
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml

  - task: destroy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}

    on_failure:
      put: slack-alert
      params:
        silent: true
        icon_emoji: ":thumbsdown:"
        text: |
          <!here|here> Destroy BOSH failed:
          https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - put: kubo-lock-<%= iaas %>
    params: { release: kubo-lock-<%= iaas %> }
<% end %>

#
# - name: upload-kubo-deployment
#  serial_groups: [proxy]
#   plan:
#   - aggregate:
#     - get: git-kubo-ci
#     - get: git-kubo-deployment
#       passed: [ destroy-bosh ]
#     - get: kubo-version
#       passed: [ destroy-bosh ]
#       trigger: true
#   - task: create-kubo-deployment-tarball
#     file: git-kubo-ci/tasks/create-kubo-deployment-tarball.yml
#   - aggregate:
#     - put: gcs-kubo-deployment-tarball
#       params:
#         file: tarballs/kubo-deployment-*.tgz
#     - put: gcs-kubo-deployments
#       params:
#         file: tarballs/kubo-deployment-*.tgz
#
#
# - name: upload-kubo-release
#  serial_groups: [proxy]
#   plan:
#   - aggregate:
#     - get: gcs-kubo-release-tarball-untested
#       passed: [ destroy-bosh ]
#     - get: kubo-version
#       passed: [ destroy-bosh ]
#       trigger: true
#   - aggregate:
#     - put: gcs-kubo-release-tarball
#       params:
#         file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz
#     - put: gcs-kubo-releases
#       params:
#         file: gcs-kubo-release-tarball-untested/kubo-release-*.tgz
#
# - name: success-notification
#  serial_groups: [proxy]

#   plan:
#   - aggregate:
#     - get: kubo-version
#       passed: [ upload-kubo-release, upload-kubo-deployment ]
#       trigger: true
#   - put: slack-alert
#     params:
#       silent: true
#       icon_emoji: ":frog:"
#       text: |
#         I am green and it'll do fine, it's beautiful
#         And I think it's what I want to be
